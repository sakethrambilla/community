datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  role          UserRole          @default(USER)
  image         String?
  userDetail   UserDetail?  
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  courseAccess CourseAccess[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum UserRole {
  ADMIN
  USER
}

model UserDetail {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  phoneNumber String
  profession String
  resume String?
  linkedin String?
  github String?
  twitter String?
  youtube String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model PostCategory {
  id        String   @id @default(cuid())
  name      String
  slug      String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  body   String
  pinned Boolean @default(false)
  categoryId String
  category   PostCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  body   String
  questionId String?
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)

  children Comment[] @relation("comment_children")
  parent   Comment?  @relation("comment_children", fields: [parentId], references: [id])
  parentId String?
  likes     Like[]
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Question {
  id        String   @id @default(cuid())
  body   String
  categoryId String
  category   QuestionCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionCategory {
  id        String   @id @default(cuid())
  name      String
  slug      String
  questions Question[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Course{
  id String @id @default(cuid())
  title String
  description String
  categoryId String
  accessType AccessType @default(FREE)
  category   CourseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  published Boolean @default(false)
  courseAccess CourseAccess[]
  courseClasses CourseClass[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AccessType {
  FREE
  PREMIUM
}





model CourseCategory {
  id String @id @default(cuid())
  name String
  slug String
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseAccess{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseClass{
  id String @id @default(cuid())
  title String
  description String
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videoUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}